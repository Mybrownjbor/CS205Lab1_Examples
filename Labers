-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace UgugdliinButets
-{
-    class Program
-    {
-        static void Main(string[] args)
-        {
-            #region Stack Өгөгдөлийн бүтэц
-            /* Stack<int> s1 = new Stack<int>(20);
-             s1.push(1); // shineer utga ugsun
-             s1.push(2);
-             s1.push(3);
-             s1.push(4);
-             s1.push(5);
-             s1.push(6);
-             s1.pop();
-             Console.WriteLine("Peekluulev: " + s1.peek() + "    Popluulav: " + s1.pop() + "  ,");
-             for(int i = 0;i<20;i++)
-             Console.WriteLine(s1.ToString());*/
-
-
-            /*Stack<string> s2 = new Stack<string>(20);
-
-            s2.push("Hello"); // shineer utga ugsun
-            s2.push("My");
-            s2.push("Friend");
-            s2.push("Or");
-            s2.push("Enemy");
-            //s2.Clear();
-            s2.pop();
-            Console.WriteLine("Peekluulev: " + s2.peek() + "    Popluulav: " + s2.pop() + "  ,");
-            for(int i = 0;i<20;i++)
-            Console.WriteLine(s2.ToString());
-
-
-           Console.Read();*/
-            #endregion
-            Listlest<int> l1 = new Listlest<int>(20);
-
-            l1.insertItem(1,3);
-            for(int i = 0; i < 5; i++)
-            Console.WriteLine(l1.ToString());
-            Console.Read();
-
-        }
-    }
-}
-
-
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace UgugdliinButets
-{
-    class Stack<T>
-    {
-        private int count = 0;
-        private T[] arraySize;
-
-        public Stack(int size)
-        {
-            arraySize = new T[size];
-        }
-
-        public bool isEmpty()
-        {
-            if (arraySize.Length < 1)
-                return true;
-            else
-                return false;
-        }
-
-        public bool isFull()
-        {
-            if (arraySize.Length < 20)
-                return true;
-            else
-                return false;
-        }
-
-        public T push(T v)
-        {
-            if (isEmpty() || isFull()) {
-                return arraySize[count];
-            }
-            else
-            {
-                return arraySize[count++] = v;
-            }
-        }
-
-        public T pop()
-        {
-            if (isEmpty())
-            {
-                throw new InvalidOperationException("Stack is empty");
-            }
-            return arraySize[count--];
-        }
-
-        public T peek()
-        {
-            if (isEmpty())
-            {
-                return arraySize[count];
-            }
-            return arraySize[count-1];
-        }
-
-        public void Clear()
-        {
-            while (!isEmpty())
-            {
-                this.pop();
-            }
-        }
-
-        public override string ToString()
-        {
-            return "Pushes: " + arraySize[count--];      
-        }
-
-    }
-}
-
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace UgugdliinButets
-{
-    class Nexter<T>
-    {
-        public int key;
-        public T value;
-        public Nexter<int> next;
-
-    }
-
-    class Listlest<T>
-    {
-        private int count = 0;
-        private T[] arraySize;
-
-        public Listlest(int size)
-        {
-            arraySize = new T[size];
-        }
-        public bool isFull()
-        {
-            if (arraySize.Length < 20)
-                return true;
-            else
-                return false;
-        }
-
-        public Nexter<int> head;
-
-        public T Add(Nexter<int> v)
-        {
-            Nexter<int> sample = new Nexter<int>();
-            sample = v;
-            sample.next = head;
-            head = sample;
-            return arraySize[count++];
-        }
-
-        public T insertItem(int count, T anyThing)
-        {
-            return arraySize[count] = anyThing;
-        }
-
-        public override string ToString()
-        {
-            return arraySize[count--].ToString(); 
-        }
-
-    }
-}
